// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model UserModel {
  id       String       @id @default(uuid())
  email    String @unique
  login    String
  phone String?
  hashpassword String
  basket    Basket[] @relation("UserBasket")
  Comment  Comment[] @relation("CommentWritenBy")
  boughtProduct BoughtProduct[] @relation("UserBought")
  address Address? @relation("AddressUser")
  avatar String?
  isActive Boolean
  rating Rating[] @relation("RatingWritenBy")
}
model FirstLevelCategory {
    id String         @id @default(uuid())
    name String
    alias String
    secondLevelCategory SecondLevelCategory[] @relation("firstCategory")
}
model Address {
  id         String   @id @default(uuid())
  city       String
  country    String
  created_at DateTime @default(now())
  street     String
  updated_at DateTime @updatedAt
  user      UserModel     @relation("AddressUser" ,fields: [userId], references: [id])
  userId    String @unique
}
model SecondLevelCategory {
   id String @id @default(uuid())
   name String @unique
   alias String
   firstLevelCategory FirstLevelCategory @relation("firstCategory", fields: [firstLevelId], references: [id])
   firstLevelId String
   model ModelDevice[] @relation("ModelDevice")
   brands BrandOnSecondCategory[]
}

model Payment {
    id String @id @default(uuid())
    uuid String @unique
    orderId String
    amount String
    paymentAmount String?
    isFinal Boolean
    url String
    chatId Int
}
model BoughtProduct {
    id String @id @default(uuid())
    uuid String @unique
     created_at DateTime    @default(now())
    delivered         Boolean
    isFinal Boolean
    url String?
    updated_at     DateTime     @updatedAt
    basket Basket[] @relation("BoughtProduct")
    user UserModel @relation("UserBought", fields: [userId], references: [id])
    userId String
    finnalyPrice String
    createdAt DateTime   @default(now())
}
model Basket {
    id String @id @default(uuid())
    product Product @relation("ProductBought", fields: [productId], references: [id])
    user UserModel @relation("UserBasket", fields: [userId], references: [id])
    order      BoughtProduct?      @relation("BoughtProduct", fields: [boughtProductId], references: [id])
    buying     Boolean
    productId String
    userId String
    boughtProductId String?
    quantity Int
    createdAt DateTime   @default(now())
}
model Product {
  id                  String         @id @default(uuid())
  brand               Brand       @relation("BrandDevices", fields: [brandId], references: [id])
  modelDevice         ModelDevice @relation("ModelByProduct",fields: [modelDeviceId], references: [id], onDelete: Cascade)
  tag   Tag   @relation("TagProduct", fields: [TagId], references: [id], onUpdate: NoAction)
  name                String @unique
  price               Int
  oldPrice            Int?
  TagId               String
  brandId             String
  Color               String?
  Description         String?
  image String?
  Memory Int?
  Ram Int?
  modelDeviceId       String
  quantity            Int @default(0)
  basket Basket[] @relation("ProductBought")
}



model Brand {
  id      String       @id @default(uuid())
  name    String
  Product Product[] @relation("BrandDevices")
  secondLevelCategory BrandOnSecondCategory[]
  model ModelDevice[] @relation("BrandByModel")
}
model BrandOnSecondCategory {
   brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     String
  category   SecondLevelCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  @@id([brandId, categoryId])
  }
model ModelDevice {
  id      String       @id @default(uuid())
  name    String
  product Product[] @relation("ModelByProduct")
  secondCategoryId String
  brandId String
  secondCategory SecondLevelCategory @relation("ModelDevice", fields: [secondCategoryId], references: [id], onUpdate: NoAction)
  Comment             Comment[] @relation("CommentProduct")
  rating Rating[] @relation("RatingProduct")
  brand Brand @relation("BrandByModel", fields: [brandId], references: [id])
}

model Comment {
  id          String       @id @default(uuid())
  createdAt   DateTime  @default(now())
  title String
  pictures String?
  comment     String
  writtenById String
  modelDeviceId   String
  writtenBy   UserModel @relation("CommentWritenBy", fields: [writtenById], references: [id])
  model     ModelDevice   @relation("CommentProduct", fields: [modelDeviceId], references: [id], onUpdate: NoAction)
}
model Rating {
    id          String       @id @default(uuid())
    createdAt   DateTime  @default(now())
    number     Int
    writtenById String
    modelDeviceId   String
    writtenBy   UserModel @relation("RatingWritenBy", fields: [writtenById], references: [id])
    model     ModelDevice   @relation("RatingProduct", fields: [modelDeviceId], references: [id], onUpdate: NoAction)
}

model Tag {
  id      String       @id @default(uuid())
  name     String    @unique
  product   Product[] @relation("TagProduct")
}

